 So, I thought today we'd talk about DNS or the domain name system. This is a service that runs on all of our computers, but obviously is run mostly over the internet by big servers. The idea is that we want to try and resolve IP addresses to domain names. For example, I go to youtube.com, then at some point I'm going to have to work at what the IP address of that server is. I can ask it using HTTP to give me some amazing computer file videos. To do that, there needs to be some system in place because me just guessing an IP could take quite a long time. The domain name system is the system we use to do this. I'm going to type in either on a URL bar in my browser or on the command line, a domain name, and then it's going to have to be resolved to an IP. Then I can actually communicate with that server to do whatever it was I wanted to do. So, just to clarify, if I put in computer file.website, also, there's something somewhere that needs to know where to find that. There will be usually one or two authoritative name servers, which are service that can specifically say it's this IP. And I have no idea where they are. That's not the point. The point is we can find out where they are. This is the mechanism that DNS uses. We don't know where anything is. We ask a few things that we know where they are. And then they help us on. And we kind of keep asking. We keep asking, going to door to door, and then eventually find out what the answer is. Or we don't. And then you get a couldn't find the DNS, couldn't find the domain, no website. So, let's imagine that I've gone to my browser or I've typed ping google.com or something like that. So, my computer will have a cache of lots of domain names that I've visited recently. But they will last maybe one or two hours for ones on my computer. So, let's assume that we've just turned a computer on after a week or something like that. And so, it doesn't know where Google.com is. It will have to make it a DNS query to find out what it is. Now, the first point of contact will usually be a name server that belongs either to your organization, but you're in. So, let's say the university, nothing will have a name server or two. Or it will be your ISP if you live at home probably. Or you might have configured something like Open DNS yourself and you might have one yourself. But let's assume for the sake of argument that we're using our ISP's domain name server. So, this is our computer here. And we want to go to some websites. So, let's say google.com. Now, we don't know what the IP address is of google.com. So, we're going to have to ask some other computer that might know. What would normally happen here is we would ask a name server that we've either configured ourselves. Or that is, let's say, given to us by our ISP. So, I'm going to connect to my ISP server here, ISP. And this is their name server. And I'm going to say google.com. Question mark. I mean, there'll be a few other bits of information in that. Just google.com in the talking question. Now, this server will either know because it has a little cache of stuff. That it can look up. Now, if someone else has been to google.com recently, which is obviously quite likely, it would know what that is and it will give that information back. But let's assume that it doesn't. And let's assume that this is set up to be what we were called a recursive resolver. So, that means it can not only answer queries about DNS, but it can also ask queries about DNS. It's got to ask another machine that it thinks might know the answer. Now, it hasn't got the foggiest idea, right? Because there are a lot of different IP addresses. So, what it's going to do is it's going to pick from a list of root name servers. So, it's going to talk up here on the internet to a root name server. So, the name server will go off to the root name server of which is about 20. Now, these are hard coded. It all computes as have access to these. I think one of them is run by various signs. For example, one of them is run by NASA. I don't know what. But it is. So, this root name server will say, I don't know. I don't know what Google.com's IP addresses this day, right? Because they may be able to turn their computer off and on again and it's changed. So, what I do know is that this IP address of this global top level domain name server could help you. And there might be a few of these as well. So, it's going to send us a.com name server, right? Or multiple ones and one will pick one. Now, this.com name server, we're getting a little bit closer. So, it's kind of working all the way backwards through the URL in some sense. We'll through the domain name. So, we will put in a request to this.com name server. It will say, I don't actually know. But I do know that the next place you should ask or be kind of the name server that's responsible for this zone is, let's say, NS1.google.com or something like that. Now, we're getting a lot closer, right? This is a name server, let's say, hypothetically it's run by Google. They're going to know what their own IP is are. If they don't, then Google isn't going to work. This is like lesson one of web administration. So, we actually put in a request to NS1.google.com. This is another referral, sort of spelled right with a bit of a mess with my pen. And they're going to send back, when we actually query NS1.google.com, what is Google.com? It will finally actually tell us it is 10.0.1.2. Now, it definitely isn't that. But, you know, that's the idea. So, we finally have an IP address. Now, what we can actually do now is send an HTTP request or a ping or whatever it is we want to do to that IP. And then we can get a response. So, that's how it works. Now, the DNS service is a little bit more clever than this sort of overview, right? Because of this caching and stuff like this. So, I have a cache here. And this recursive resolver also has a cache. And any other resolvers involved will also have a cache. Let's suppose that this ISP's name server is serving 10,000 customers. All of whom are going to Google. This is a bit of a waste of time, right? Especially given that Google will probably not change in an IP every hour. So, the first person in the morning that gets up and goes to Google.com is going to have to wait factions of a second longer, right? Because it's going to be doing this. But then, Google.com will be put into this cache with a time to live. And then for that amount of time, this will just serve that straight back. So, what is Google.com? It's this. It's 10.0.1.2, whatever. And that means this name server, which will be quite powerful, can serve all the ISP's customers really, really quickly, which is kind of neat. This is basically a distributed database. This name server is going to be putting in lots and lots of requests, right? 200s of servers, probably per second. Because there are all really people on the internet asking, I want to go to random website.com, random.website.com, website.com, website.random, and so on. And it's going to be doing all this. How does it know what to do with any of this distributed information is coming back? Well, what it does is it has a query ID, which it sends out whenever it sends out a request. And the name server responds will respond with the same query ID. So, it's labeled. So, it's labeled, right? And that allows it to sort through the mess a little bit more. It leads to a slightly interesting quirk, which is that if I send a response to a name server, but it didn't want, but I get the query ID right, it will accept it, right? Which is for a different video. That's DNS cache poisoning. For the most part, that doesn't happen, right? For the most part, the query ID is matching if it works out quite well. And it's really, really quick. So, what is she? She's a corn snake. There'll be no corn snake. But she's in the middle of shedding, and she's, she's grumpy and hiding under a mock. And, probably, asleep. So, you know, that's the best of you you're going to get at the moment. We might see her another time. Yeah, that's what.